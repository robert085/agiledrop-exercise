"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var body = document.querySelector("body"),
    header = document.querySelector(".header"),
    nav = document.querySelector(".nav-bar"),
    links = document.querySelectorAll(".list__link"),
    logo = document.querySelector(".logo"),
    sections = document.querySelectorAll("section"),
    offCanvas = document.querySelector(".off-canvas"),
    offCanvasBtn = document.querySelector(".button-offc"),
    offCanvasL = document.querySelector(".off-list"),
    offCanvasLI = document.querySelectorAll(".off-list__item"),
    offCanvasLIL = document.querySelectorAll(".off-list__link"),
    techNav = document.querySelector(".tech-box__nav"),
    techButtons = document.querySelectorAll(".btn-tab"),
    techContent = document.querySelectorAll(".tech-box__content"),
    btnDrupal = document.querySelector(".btn-drupal"),
    btnLaraver = document.querySelector(".btn-laraver"),
    btnVue = document.querySelector(".btn-vue"),
    drupal = document.getElementById("drupal"),
    laraver = document.getElementById("laraver"),
    vue = document.getElementById("vue"),
    stickyNav = function stickyNav(e) {
  var _e = e,
      _e2 = _slicedToArray(_e, 1),
      e = _e2[0];

  e.isIntersecting ? nav.classList.remove("sticky") : nav.classList.add("sticky");
},
    stickyObserver = new IntersectionObserver(stickyNav, {
  root: null,
  threshold: .14
}),
    secActive = (stickyObserver.observe(header), document.querySelector(".list").addEventListener("click", function (e) {
  e.preventDefault();
  var t = e.target.closest(".list__link");
  t && (e = t.getAttribute("href"), document.querySelector(e).scrollIntoView({
    behavior: "smooth"
  }));
}), function (e) {
  var _e3 = _slicedToArray(e, 1),
      t = _e3[0];

  if (t.isIntersecting) {
    var o = t.target.getAttribute("id");
    links.forEach(function (e) {
      e.getAttribute("href") === "#" + o ? e.classList.add("list__link--active") : e.classList.remove("list__link--active");
    });
  }
}),
    secObserver = new IntersectionObserver(secActive, {
  root: null,
  threshold: .6
}),
    delayList = (sections.forEach(function (e) {
  secObserver.observe(e);
}), function () {
  offCanvasLI.forEach(function (e, t) {
    setTimeout(function () {
      e.classList.toggle("reveal-list"), console.log(t);
    }, 100 * t);
  });
}),
    maxWidth = (offCanvasBtn.addEventListener("click", function () {
  offCanvas.classList.contains("hidden") ? (offCanvas.classList.remove("hidden"), document.querySelector(".button-offc__icon").classList.add("button-offc__icon--close")) : (offCanvas.classList.add("hidden"), document.querySelector(".button-offc__icon").classList.remove("button-offc__icon--close")), delayList();
}), logo.addEventListener("click", function (e) {
  e.preventDefault();
  var t = e.target.closest(".logo__link");
  e = t.getAttribute("href");
  document.querySelector(e).scrollIntoView({
    behavior: "smooth"
  }), offCanvas.classList.contains("hidden") || offCanvas.classList.add("hidden");
}), offCanvas.addEventListener("click", function (e) {
  e.preventDefault();
  var t = e.target;
  t.classList.contains("off-list__link") && (e = t.getAttribute("href"), document.querySelector(e).scrollIntoView({
    behavior: "smooth"
  }), document.querySelector(".button-offc__icon").classList.remove("button-offc__icon--close"), offCanvas.classList.add("hidden"), delayList());
}), techNav.addEventListener("click", function (e) {
  var t = e.target.closest(".btn-tab"),
      o = t.dataset.btn;
  techButtons.forEach(function (e) {
    e.classList.remove("active"), t.classList.add("active");
  }), techContent.forEach(function (e) {
    e.classList.add("tech-hidden"), document.getElementById(o).classList.remove("tech-hidden");
  });
}), window.matchMedia("(max-width: 1000px)")),
    condition = function condition(e) {
  e.matches ? (btnDrupal.after(drupal), btnVue.after(vue), btnLaraver.after(laraver)) : (techNav.after(drupal), techNav.after(vue), techNav.after(laraver));
},
    slides = (condition(maxWidth), maxWidth.onchange = function (e) {
  condition(e);
}, document.querySelectorAll(".slide"));

console.log(slides);
var slide = 0;

var slider = function slider() {
  slides.forEach(function (e, t) {
    setTimeout(function () {
      ++slide <= slides.length - 1 ? slides.forEach(function (e) {
        e.style.transform = "translateX(-".concat(100 * slide, "%)"), console.log(slide);
      }) : (slide = 0, slides.forEach(function (e) {
        e.style.transform = "translateX(".concat(100 * slide, "%)");
      }));
    }, 2e3 * (t + 1));
  });
};

slider();
//# sourceMappingURL=script.js.map
